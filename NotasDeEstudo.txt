BDD = Cucumber = Gherking

Dado
Quando
Então


resultado final: documentação escrita em linguagem natural e automatizavel, documentação viva/executavel, isso não é bdd, é cucumber executando teste escrito com essa sintaxe



USO DE BDD: escrever especificação q vai gerar colaboração com a equipe de devs.


SE USAR PARA DESENVOLVER ALÉM DES TESTAR, OU SEJA, SE VOCÊ USAR O GHERKIN PRA CONSTRUIR CRITERIOS DE ACEITAÇÃO E ESPECIFICAÇÕES COLABORATIVAS VC VAI TER UM GANHO AINDA MELHOR NA QUALIDADE DO SEU PRODUTO.


def em Ruby é a palavra chave para DEFinir um método


Especifica em Gherking, Automatiza com Cucumber

(a gente usa o Capybara com o cucumber mas ele depende do selenium webdriver)



DESCRIÇÃO DE ESTRUTURA/PASTAS/ARQUIVOS:

1. Gemfile = Source é de onde as bibliotecas para/do Ruby serão importadas quando adicionamos um gem'biblioteca';

2. cucumber.yml = não lembro, revisar video aula depois;

3. catalogo.feature = É um arquivo onde está a especificação descrita em BDD/Capybara;

4. env.rb = é o ambiente virtual de desenvolvimento do Ruby;

5. steps.rb = é onde iremos automatizar a especificação descrita em BDD no arquivo .feature 

6. GERANDO O ESQUELETO(método) DO TESTE AUTOMATIZADO BASEADO APENAS NO BDD:
    Para isto basta executarmos o arquivo onde estão os passos automatizados (mesmo que esteja vazio, insira qualquer código que passe), 
    ao final da execução será informado que os passos foram skipados pois não há o código e irá te fornecer o código esqueleto.


Data table = recurso do cucumber

PAGE OBJECTS: 
    Criar pasta "pages"  dentro da pasta "support" > criar arquivo home.rb que vai ser a homepage do teste;
    Camada page objects, pra facilitar a manutenção do código e reuso de alguns steps que são incomuns entre features e cenarios em gherkin.
    Page object é um padrão de projeto onde vc faz a organização por páginas.
    Deixa o projeto versátil e com boa escalabilidade.

    No arquivo home.rb,Essa arquiv, a classe HomePage não consegue executar VISIT (naturalmente sem o INCLUDE), que é um método DO CAPYBARA, o visit funciona bem na camada de steps mas não nessa home, pq o arquivo env que é o arquivo principal do cucumber onde a gente tem a importação e configuração do Capybara só que o Cucumber naõ sabe que eu estou construindo uma nova camada personalizada, eu tenho que deixar claro que eu quero usar o Capybara dentro dessa classe. classe visit sem o include não consegue executar

    Com o page objects no projeto cucumber temos 3 camadas: 
        1. Camada de esécificação usando Gherkin;
        2. tem a camada de implementação onde estão os steps, onde vc organiza todo o fluxo de execução;  
        3. e a camada meio que principal que onde da realmente vida ao teste automatizado que é a camada de page objects onde a gente tem validações e ações organizadas por páginas.



AULA 22:            https://github.com/qax-education/cucumber-experience

    Você como analista/engenheiro de QA, analisando essa documentação do cupom.md identifica que é possível que o dev
    não entenda claramente qual a ideia da funcionalidade (no caso a funcionalidade pede para que seja criado um campo
    de cupom de desconto onde o cupom deve ser aplicado somente ao valor do produto e não ao valor total que considera
    o valor do frente, então ao final deve ser aplicado o desconto somente no valor do produto, recalculando o valor
    total do pedido com o valor do cupom aplicado somente ao produto + valor do frete, além de mais critérios/cenários
    esse cenário foi apenas um exemplo do que pode ser mal interpretado). 
    Será que o dev vai entender isso de forma correta? Ou seja, se ele errar e aplicar no valor total poDde impactar
    financeiramente a empresa. Então eu tento entender se isso aqui é o suficiente para o desenvolver entregar um 
    projeto de qualidade para eu testar.

    Portanto essa é uma das idéias principais do Gherking/BDD, você pode usar o Gherking como uma ferramenta para
    colaborar com o enriquecimento dessa documentação, construindo os cenários aqui para facilitar o entendimento para
    o desenvolvedor. Eu posso usar enriquecer isso pois essa funcionalidade ainda não está pronta, melhorando a 
    comunicação para que eu tenho um software de qualidade, essa é a ideia.
    ATÉ O MOMENTO NÓS USAMOS O GHERKIN APENAS PARA AUTOMATIZAR COM O CUCUMBER O QUE JA EXISTIA DO SOFTWARE.
    NESSE MÓDULO NÓS VAMOS USAR O GHERKIN PARA ENRIQUECER A HISTÓRIA, PARA TRAZER MAIS INFORMAÇÕES RELEVANTES PARA O 
    TIME DE DESENVOLVIMENTO DE UMA FUNCIONALIDADE QUE AINDA ESTÁ EM DESENVOLVIMENTO.

    E O OBJETIVO É CONSEQUÊNCIA, UM SOFTWARE DE QUALIDADE.

    Atendendo claramente a expectativa do PO ou do cliente que construiu a história do usuário com esses critérios de
    aceitação, então EU COMO QA vou garantir a QUALIDADE em todas as etapas e não apenas na hora de testar e procurar
    o bug mas também na hora de especificar a funcionalidade que deve ser desenvolvida.



AULA 23:     Henriquecendo critérios de aceite

    Criamos o arquivo cupom.feature, onde especificamos em gherking a nova funcionalidade do cupom.md (arquivo de especificação da funcinalidade do cupom no repositorio da QAx).
    Lembrando que nesta aula essa funcinalidade ainda não existe, estamos apenas especificando de uma forma melhor para compreensão do dev em gherkin
    então O DEV VAI LER essa documentação em gherking e DESENVOLVER A FUNCIONALIDADE DIRIGIDA POR ESTE COMPORTAMENTO.
    Na próxima aula, esta funcionalidade estará pronta, AI SIM TEREMOS O BDD, que é a aplicação/funcionalidade desenvolvida a partir da minha documentação em gherkin.
    Até então nós não fizemos BDD, apenas automatizamos com cucumber o que ja existia do produto baseado no gherkin "ja existente".



AULA 24:        https://starbugs-qa.vercel.app

    Nesta aula não foi feita muita coisa, foi apenas nos apresentado o novo site que contém a nova funcionalidade do cupom no checkout.
    Preenchemos a especificação com os dados de massa de teste dos cupons, porém precisamos lembrar que esta ainda é apenas a especificação.
    Na proxima aula vamos remodelar essa especificação ai sim pensando em automatizar e não necessariamente precisa ser em cucumber.



AULA 25:        AUTOMAÇÕA COM GHERKIN?

    Nesta aula alteramos a especificação depois que a funcinalidade ja esta desenvolvida, alterando de uma forma mais colaborativa para uma forma/cenário mais técnica, ficando melhor para automação.

    Além da alteração da especificação para um cenário mais técnico, também criamos os steps da automação dessa especificação com a criação do arquivo cupom_steps.rb dentro da pasta step_definitions,
    implementando assim a forma mais técnica da especificação.
    Lembrando que transformamos tudo em page objcts, adicionando também mais um método no page object do checkout,
    adicionando o método set_discout, onde ele encontra o campo do disconto, seta o cupon e clica no botão de aplicar.

    essa foi a metade da aula, onde remodelamos e automatizamos o primeiro cenário.
    Vou deixar para continuar/terminar essa aula amanhã porque agora são 02:53am e eu estou muito cansado, não consigo
    absorver mais nada (apesar de saber mais ou menos como vai seguir/terminar essa aula.)

    SEGUNDA PARTE DA AULA 25:

    Terminamos de automaizar os ultimos dois cenários de validação de cupom expirado e inválido, tornando e reaproveitando
    a variável do produto em global no primeiro passo assim podemos acessar o dado do valor total do produto, sendo que no primeiro
    passo usamos apenas o nome do produto.

    na camada de especificação conseguimos reaproveitar o data table para todos os cenários assim como também centralizamos
    em um dado só em vez de 3, utilizando só o QUANDO e ENTÂO dos outros cenários, isso é o contexto no BDD/Gherkin.
    Também criamos um novo método de assert_notice para validar as notificações de cupom invalido e expirado no page objects do checkout.


AULA 26:                    Teste de regressão.

        Agora que temos nosso projeto pronto e totalmente automatizados podemos usar ele para fins de teste de regressão
        ou seja, rodando todos os testes de uma vez e ver se algum da erro, neste caso todos devem passar.

        colocamos todos os arquivos de steps para rodar como comando "bundl exec cucumber", sem distinguir arquivos ou tags.
        ao contrario do "bundle exec cucumber features/cupom.feature" por exemplo


AULA 27:                    Teste de fumaça.

        Conforme a história, o primeiro teste do desenvolvimento orientado a hardware la nos primórdios era ligar para ver
        se saia fumaça, se não saisse fumaça é que estava tudo o que, essa é a ideia da tag @smoke no cenarios a nivel de especificação
        quando um cenário está com a tag @smoke siginifica que este teste é o teste principal, que deve rodar antes dos demais.
        bundle exec cucumber -t @smoke


AULA 28:                    RELATÓRIOS E FORMATOS DE SAíDA;

        bundle exec cucumber --help

        Nesta aula vamos falar do argumento --form ou -f, esse argumento faz com que vc possa definir o formato de saída 
        para cada execução, 
        html é um output bem legal pq tras um relatório mais visual e interativo
        junit é legal para integrar com CI, tipo o jenkins
        pretty é o formato padrão do cucumber

        JUNIT - é bacana pq vai pegar todo o output dessa execução e salvar num arquivo junit
        mas pra funcionar tenho que passar uma argumento adicional pra falar pro cucumber onde esse arquivo vai ser adicionando
        então adicionamos o argumento --out 
        bundle exec cucumber -t @smoke -f junit --out reports
        onde ele automaticamente criará a pasta reports e adicionará este arquivo XML la com toda a execução no formato junit
        você pode user isso no servidor de CI/CD
        
        JSON - É quase a mesma idéia do junit porém no formato JSON, mas diferente do junit onde passamos o nome da pasta
        para o json precisamos especificar o nome do arquivo também além do diretório
        bundle exec cucumber -t @smoke -f json -o reports/report.json

        HTML - bundle exec cucumber -t @smoke -f html -o reports/report.html
        Gera o report visual/interativo via web browser, precisamos também passar o argumento de output com o diretório
        e nome do arquivo do report.

        Lembrando que quando executamos passando outros formatos de saída, gerando um arquivo por exemplo, não temos
        a saída do teste no terminal, e eu sinto falta disso, então FELIZMENTE posso fazer ter a saída tanto no arquivo
        quanto no temrinal, basta passarmos o argumento de format de novo com o formato pretty por exemplo
        mas poderia ser progress também por exemplo, saídas de terminal né e não que gerem arquivo:
        bundle exec cucumber -f html -o reports/report.html -f pretty
        O cucumber permite fazer uma execução multiformato

        IMPORTANTE:
        Podemos passar esses argumentos de formatação de saída no arquivo cucumber.yml
        tornando assim os argumento de formatação a forma de exeução padrão quando executarmos o bundle exec cucumber
        ou seja, executando por tag ou não, por feature ou não, ele sempre vai fazer esse output.
        Lembrando que desta forma o arquivo de report terá um nome fixo, sendo assim, sempre sera sobrescrito o ultimo
        report.


AULA 29:                ANEXANDO SCREENSHOTS

        1. Acessamos o arquivo hooks.rb e adicionamos um gancho AFTER, o gancho BEFORE é executado ANTES de cada teste
        o AFTER é depois de cada teste e porque implementamos a estratégia de screenshot dentro desse gancho?
        Sempre que eu finalizo um teste/cenario eu tenho um desfecho onde eu faço a validação para garantir que o
        cenário passou, então esse é o momento oportuno pra eu tirar um print e anexar no meu relatório.

        2. Lembrando que com este gancho, será armazenado apenas a último screenshot do último teste executado, ou seja,
        se tiver mais de uma feature, mais de um cenário, e rodarmos uma regressão completa, todos os prints serão tirados
        de todos as features e todos os cenários durante a execução e anexados no relatório, porém na pasta de SCREENSHOTS
        TERÁ APENAS O ÚLTIMO SCREENSHOT DO ULTIMO TESTE EXECUTADO.

        3. É legal adicionarmos os relatórios e evidencias automáticas principalmente quando o projeto de automação está no
        início da implementação no time, então é legal adicionar relatório/evidência para tudo, dando mais segurança para o meu time.
        Mas depois de um certo tempo de consolidação dos testes automatizados, quando a equipe ja vê/sabe que os testes automatizados
        agregam valor, podemos alterar para que essas evidências seja tiradas/adicionadas no relatório apenas caso falhe.
        Fazemos isso passando o argumento em pipe no método After no arquivo hooks.rb.


        IMPORTANTE:   CASO NÃO PRECISA SUBIR PARA O GIT/VERSIONAR ARQUIVOS DE REPORTS/SCREENSHOTS:

            podemos adicionar o aquivo .gitignore e adicionarmos o diretório do qual não queremos versionar ao
            dar git add., git commit, git push.
            Eu adicionei neste projeto mas deixei comentado pois quero subir os relatórios e screenshots também.
            Mas apenas para fins de conhecimento. o que é interessante se você tiver por exemplo um projeto pessoal
            que queira compartilhar publicamente mas não necessariamente os reports das suas execuções.


AULA 30: ACHOU QUE TINHA ACABADO NÉ?            SCENARIO OUTLINE:


     Scenario outline/esquema do cenario é um recurso do cucumber.
     Definimos um esquema de cenario onde temos uma especificação que executa mais de doius comportamentos  
    Quando implementamos esquema de cenario o cucumber entende que tem que ter a matriz (tabela de pipe) e que cada place holder  ("<placeholder>") vai ser substituido pelas colunas com as informações então ele vai conclular que tem duas linas ou seja, dois cenarios para ser executado de acordo com a massa de teste de cada linha da tabela.
    Isso é muito bom para reuso com o placeholder.



    AGORA SIM, CURSO FINALIZADO.




